{%- comment -%}
  product-meta-tools.liquid
  - Uses card_product.metafields.reviews.rating.value as primary rating source (falls back to many common paths)
  - Wishlist (localStorage)
  - Direct native Share (no fallback menu)
  - Fixed Liquid expressions (no comparisons/filters inside {{ }})
  Usage:
  {% render 'product-meta-tools', product: product %}
{%- endcomment -%}

<div class="product-meta-tools" aria-label="Product actions" data-product-id="{{ product.id }}">

  <!-- Wishlist -->
  <button type="button" class="pmt-btn pmt-wishlist" aria-pressed="false" aria-label="Add to wishlist" data-action="toggle-wishlist">
    <svg class="heart" viewBox="0 0 24 24" width="20" height="20" aria-hidden="true" focusable="false">
      <path class="heart-stroke" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
      <path class="heart-fill" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
    </svg>
  </button>

  <!-- Share (native only) -->
  <div class="pmt-share">
    <button type="button" class="pmt-btn pmt-share-toggle" 
            aria-label="Share product" 
            data-action="open-share">
      <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true" focusable="false">
        <circle cx="18" cy="5" r="2.5" class="share-dot"/>
        <circle cx="6" cy="12" r="2.5" class="share-dot"/>
        <circle cx="18" cy="19" r="2.5" class="share-dot"/>
        <line x1="8.59" y1="13.51" x2="15.42" y2="17.49" class="share-line"/>
        <line x1="15.41" y1="6.51" x2="8.59" y2="10.49" class="share-line"/>
      </svg>
    </button>
  </div>
</div>

<style>
.product-meta-tools { display: flex; gap: 16px; align-items: center; flex-wrap: wrap; font-family: inherit; }
.pmt-rating { display: flex; gap: 8px; align-items: center; font-size: 14px; color: #333; }
.pmt-stars { display: flex; gap: 2px; align-items: center; }
.star { width: 16px; height: 16px; display: inline-block; }
.star-filled path { fill: #FFB800 !important; stroke: none !important; }
.pmt-count { color: #666; font-size: 12px; }
.pmt-btn { display: inline-flex; align-items: center; justify-content: center; padding: 6px; border-radius: 50%; border: none; background: white; cursor: pointer; transition: all 0.2s ease; }
.pmt-btn:hover { background: #eee; transform: scale(1.05); }
.heart { width: 20px; height: 20px; transition: all 0.3s ease; }
.heart-stroke { fill: none; stroke: #333; stroke-width: 1.5; }
.heart-fill { fill: transparent; transition: fill 0.3s ease; }
.pmt-wishlist[aria-pressed="true"] .heart-fill { fill: #FF4B4B; }
.pmt-wishlist[aria-pressed="true"] .heart-stroke { stroke: #FF4B4B; }
.share-dot { fill: #333; }
.share-line { stroke: #333; stroke-width: 1.5; }
@media (max-width:480px){ .product-meta-tools{ gap:8px } .pmt-rating-text{ display:none } }
</style>

<script>
(function(){
  const root = document.querySelector('.product-meta-tools[data-product-id="{{ product.id }}"]');
  if(!root) return;

  const productId = String({{ product.id }});
  const productUrl = '{{ shop.url }}{{ product.url }}';
  const productTitle = {{ product.title | json }};

  /* Wishlist */
  const wlKey = 'shop_wishlist_v1';
  const wishlistBtn = root.querySelector('[data-action="toggle-wishlist"]');
  function getWishlist(){ try { return JSON.parse(localStorage.getItem(wlKey)) || []; } catch(e){ return []; } }
  function saveWishlist(arr){ localStorage.setItem(wlKey, JSON.stringify(arr)); }
  function isInWishlist(id){ return getWishlist().indexOf(String(id)) !== -1; }
  function renderWishlist(){
    const pressed = isInWishlist(productId);
    wishlistBtn.setAttribute('aria-pressed', pressed ? 'true' : 'false');
  }
  wishlistBtn.addEventListener('click', function(e){
    e.preventDefault();
    const arr = getWishlist();
    const idx = arr.indexOf(productId);
    if(idx === -1) arr.push(productId);
    else arr.splice(idx,1);
    saveWishlist(arr);
    renderWishlist();
    window.dispatchEvent(new CustomEvent('wishlist:updated', { detail: { productId, state: isInWishlist(productId) } }));
  }, { passive:true });
  renderWishlist();

  /* Native share only */
  const shareBtn = root.querySelector('[data-action="open-share"]');
  shareBtn.addEventListener('click', function(e){
    e.preventDefault();
    if (navigator.share) {
      navigator.share({
        title: productTitle,
        url: productUrl
      }).catch(err => {
        console.log('Share failed:', err);
        alert('Sharing not supported on this device.');
      });
    } else {
      alert('Sharing not supported on this device.');
    }
  });

  /* Public wishlist API */
  window.shopWishlist = window.shopWishlist || {
    get: getWishlist,
    add: function(id){ const arr=getWishlist(); if(arr.indexOf(String(id))===-1){ arr.push(String(id)); saveWishlist(arr); renderWishlist(); } },
    remove: function(id){ const arr=getWishlist(); const idx=arr.indexOf(String(id)); if(idx!==-1){ arr.splice(idx,1); saveWishlist(arr); renderWishlist(); } }
  };
})();
</script>
