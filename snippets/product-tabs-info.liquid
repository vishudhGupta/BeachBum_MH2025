{%- comment -%}
  product-details-box.liquid â€“ 2 tabs, no page auto-scroll
{%- endcomment -%}

{%- assign accent        = accent_color   | default: '#000000' -%}
{%- assign heading_color = heading_color  | default: '#000000' -%}
{%- assign body_color    = body_color     | default: '#516b72'  -%}



<div class="pd-tabs-wrap" aria-label="Product details tabs">
  <!-- Tabs -->
  <div class="pd-tabs" role="tablist" aria-orientation="horizontal">
    <button type="button" class="pd-tab is-active" data-index="1" role="tab" aria-selected="true" aria-controls="pd-panel-1">
      <span class="pd-tab-label">Care Label</span>
    </button>
    <button type="button" class="pd-tab" data-index="2" role="tab" aria-selected="false" aria-controls="pd-panel-2">
      <span class="pd-tab-label">Styling Tips</span>
    </button>
  </div>

  <!-- Panels -->
  <div class="pd-panels">
    <!-- Care Label -->
    <div id="pd-panel-1" class="pd-panel is-visible" role="tabpanel" aria-hidden="false" data-index="1">
      <div class="pd-card">
        <h4 class="pd-h">Care Label </h4>
        <p class="pd-p"> Machine wash with like colors.</p>
        <p class="pd-p">Use a mild detergent.</p>
        <p class="pd-p">Do not bleach.</p>
        <p class="pd-p">Avoid drying in direct sunlight to prevent color fading.</p>
      </div>
    </div>

    <!-- Styling Tips -->
    <div id="pd-panel-2" class="pd-panel" role="tabpanel" aria-hidden="true" data-index="2">
      <div class="pd-card">
       <h4 class="pd-h">Style Inspiration</h4>
<div class="pd-p">
  {{ product.metafields.custom.styling_tips | metafield_tag }}
</div>

    </div>
  </div>
</div>

<style>
/* core */
.pd-tabs-wrap { font-family: inherit; margin: 20px 0; --pd-accent: {{ accent }}; }
.pd-tabs {
  display:flex; gap:18px; align-items:center; margin-bottom:12px; padding:6px 4px;
  overflow-x:auto; -webkit-overflow-scrolling:touch; scrollbar-width:none;
  overscroll-behavior-x: contain; /* prevent scroll chaining to page */
}
.pd-tabs::-webkit-scrollbar { display:none; }

.pd-tab {
  display:flex; align-items:center; gap:8px; background:transparent; border:0;
  padding:6px 10px 10px; cursor:pointer; font-weight:700; color:#273238; font-size:14px;
  position:relative; white-space:nowrap; border-radius:6px; outline:none;
}
.pd-tab-icon { width:18px; height:18px; object-fit:contain; display:block; opacity:.95; }
.pd-tab.is-active { color: var(--pd-accent); }
.pd-tab.is-active::after{
  content:''; position:absolute; left:6px; bottom:-6px; height:4px;
  width:calc(100% - 12px); max-width:56px; border-radius:6px; background: var(--pd-accent);
}

.pd-panels { max-width:760px; }
.pd-panel { display:none; }
.pd-panel.is-visible { display:block; }

.pd-card{
  border-radius:8px; border:1px solid rgba(11,49,64,0.06); background:#fff;
  padding:16px; box-shadow:0 6px 18px rgba(2,6,23,0.04);
}
.pd-h{
  margin:0 0 8px; font-size:13px; font-weight:800; text-transform:uppercase;
  letter-spacing:.02em; color: {{ heading_color }};
}
.pd-p{ margin:0 0 10px; color: {{ body_color }}; font-size:14px; line-height:1.5; }

@media (max-width:640px){
  .pd-tabs{ gap:12px; padding:8px 6px; margin-bottom:10px; }
  .pd-tab{ padding:6px 8px; font-size:13px; gap:6px; }
  .pd-card{ padding:12px; }
  .pd-h{ font-size:12px; }
  .pd-p{ font-size:13px; }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function(){
  document.querySelectorAll('.pd-tabs-wrap').forEach(function(wrap){
    const tabsBar = wrap.querySelector('.pd-tabs');
    const tabs    = [...wrap.querySelectorAll('.pd-tab')];
    const panels  = [...wrap.querySelectorAll('.pd-panel')];
    if(!tabs.length) return;

    function centerTab(i){
      const el = tabs[i]; if(!el) return;
      const target = el.offsetLeft - (tabsBar.clientWidth - el.offsetWidth)/2;
      tabsBar.scrollTo({ left: Math.max(0, target), behavior: 'smooth' });
    }

    function activate(idx, center){
      tabs.forEach((t,i) => {
        const active = i === idx;
        t.classList.toggle('is-active', active);
        t.setAttribute('aria-selected', active);
        panels[i].classList.toggle('is-visible', active);
        panels[i].setAttribute('aria-hidden', (!active).toString());
      });
      if(center) centerTab(idx);
    }

    tabs.forEach((tab, i) => {
      tab.addEventListener('click', () => activate(i, true));
      tab.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight') { const n=(i+1)%tabs.length; activate(n, true); tabs[n].focus(); }
        if (e.key === 'ArrowLeft')  { const p=(i-1+tabs.length)%tabs.length; activate(p, true); tabs[p].focus(); }
      });
    });

    activate(0, false); /* initial, no scroll */
  });
});
</script>
